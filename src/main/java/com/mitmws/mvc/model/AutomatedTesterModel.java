package com.mitmws.mvc.model;

import com.mitmws.tester.PayloadEncoding;
import com.mitmws.util.GuiUtils;
import com.mitmws.httpproxy.websocket.WebsocketFrame;
import com.mitmws.httpproxy.websocket.WebsocketFrameType;
import com.mitmws.httpproxy.trafficlogger.WebsocketDirection;
import com.mitmws.tester.TestSequence;
import com.mitmws.tester.TestTarget;

import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Date;

public class AutomatedTesterModel {
    private SwingPropertyChangeSupport eventEmitter;
    private TestSequence testSequence;
    private TestTarget currentTestTarget;
    // Top right table - test runs
    private DefaultTableModel runsTableModel = new DefaultTableModel();
    // Middle right table - traffic generated by the test
    private DefaultTableModel testTrafficTableModel = new DefaultTableModel();
    // Left top - the conversation that is currently being tested
    private DefaultTableModel conversationTableModel = new DefaultTableModel();
    // Middle left - the targets for the current test
    private DefaultTableModel targetsTableModel = new DefaultTableModel();
    private DefaultTableModel payloadTableModel = new DefaultTableModel();
    // Bottom right - test log ( same as m.t )
    private DefaultTableModel testLogTableModel = new DefaultTableModel();
    private DefaultTableModel testConfigTableModel = new DefaultTableModel();
    private AutomatedTestExecutionModel automatedTestExecutionModel;
    private int totalPayloadCount = 0;
    public AutomatedTesterModel() {
        testConfigTableModel = new DefaultTableModel();
        for ( String col: new String[] {"id", "Property", "Value"}) {
            testConfigTableModel.addColumn(col);
        }

        eventEmitter = new SwingPropertyChangeSupport(this);
        automatedTestExecutionModel = new AutomatedTestExecutionModel();
        testSequence = null;
        currentTestTarget = null;
        automatedTestExecutionModel.setCurrentTestRun(null);

        for ( String col: new String[] { "testRunId", "Time","Test name","Tests", " % ", "Status"}) {
            runsTableModel.addColumn(col);
        }
        for ( String col: new String[] { "messageId", "colour","Time","Test name","--","Frame type","LEN","Payload" }) {
            testTrafficTableModel.addColumn(col);
        }
        for ( String col: new String[] { "Frame type", "Text"}) {
            conversationTableModel.addColumn(col);
        }
        for ( String col: new String[] { "testid", "colour","Enabled", "Name", "Step", "Start", "End", "Encodings"}) {
            targetsTableModel.addColumn(col);
        }
        for ( String col: new String[] { "Enabled", "Name", "Description"}) {
            payloadTableModel.addColumn(col);
        }
        for ( String col: new String[] { "Time","Level","Test name","Message" }) {
            testLogTableModel.addColumn(col);
        }
    }

    public DefaultTableModel getTestConfigTableModel() {
        return testConfigTableModel;
    }

    public void setTestConfigTableModel(DefaultTableModel testConfigTableModel) {
        this.testConfigTableModel = testConfigTableModel;
    }

    public int getTotalPayloadCount() {
        return totalPayloadCount;
    }

    public void setTotalPayloadCount(int totalPayloadCount) {
        this.totalPayloadCount = totalPayloadCount;
        eventEmitter.firePropertyChange("AutomatedTesterModel.totalPayloadCount", null, totalPayloadCount);
    }

    public AutomatedTestExecutionModel getAutomatedTestExecutionModel() {
        return automatedTestExecutionModel;
    }

    public TestSequence getTestSequence() {
        return testSequence;
    }

    public void setTestSequence(TestSequence testSequence) {
        this.testSequence = testSequence;
        targetsTableModel.setRowCount(0);
        syncTargetsTable();
        eventEmitter.firePropertyChange("AutomatedTesterModel.testSequence", null, testSequence);
    }

    public TestTarget getCurrentTestTarget() {
        return currentTestTarget;
    }

    public DefaultTableModel getTestTrafficModel() {
        return testTrafficTableModel;
    }

    public DefaultTableModel getRunsTableModel() {
        return runsTableModel;
    }

    public DefaultTableModel getTestTrafficTableModel() {
        return testTrafficTableModel;
    }

    public DefaultTableModel getTargetsTableModel() {
        return targetsTableModel;
    }

    public DefaultTableModel getPayloadTableModel() {
        return payloadTableModel;
    }

    public DefaultTableModel getConversationTableModel() {
        return conversationTableModel;
    }

    public int getTargetStepIdx( TestSequence testSequence, TestTarget testTarget ) {
        int testStepIdx = testTarget.getTestableStepIdx();
        // If the test sequences have ids get the idx using the array list
        for ( int i = 0; i < testSequence.getTestSequenceItems().size(); i++ ) {
            if ( testSequence.getTestSequenceItems().get(i).getId() == testTarget.getTestSeqId() ){
                testStepIdx = i;
                break;
            }
        }
        return testStepIdx;
    }

    /*
        Sync the contents of the model sequence with the table model
     */

    private boolean targetTableModelHasId( String id ) {
        if ( targetsTableModel.getRowCount() > 0 ) {
            for ( int i = 0; i < targetsTableModel.getRowCount(); i++ ) {
                String curId = (String)targetsTableModel.getValueAt(i,0);
                if ( curId != null ) {
                    if ( curId.equals(id)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /*
        Sync the content of the model with the table model used by the jtable
     */
    public void syncTargetsTable() {
        if ( getTestSequence() != null ) {

            // update
            for ( int i = 0; i < targetsTableModel.getRowCount(); i++ ) {
                String curId = (String) targetsTableModel.getValueAt(i,0);
                TestTarget curTestTarget = getTestSequence().getTestTargetById(curId);
                if ( curTestTarget != null ) {
                    targetsTableModel.setValueAt(curTestTarget.isEnabled(),i,2);
                    targetsTableModel.setValueAt(curTestTarget.getTargetName(),i,3);
                    targetsTableModel.setValueAt(getTargetStepIdx(getTestSequence(), curTestTarget),i,4);
                    targetsTableModel.setValueAt(curTestTarget.getStartPos(),i,5);
                    targetsTableModel.setValueAt(curTestTarget.getEndPos(),i,6);
                    targetsTableModel.setValueAt(curTestTarget.getEnabledEncodings().size(),i,7);
                }
            }

            // add
            for ( TestTarget testTarget : getTestSequence().getTestTargets() ) {
                if (targetTableModelHasId(testTarget.getTargetUUID())) {
                    continue;
                }
                targetsTableModel.addRow(new Object[]{
                        testTarget.getTargetUUID(),
                        testTarget.getHighlightColour(),
                        testTarget.isEnabled(),
                        testTarget.getTargetName(),
                        getTargetStepIdx(getTestSequence(), testTarget),
                        testTarget.getStartPos(),
                        testTarget.getEndPos(),
                        testTarget.getEnabledEncodings().size(),
                });
            }

            // remove
            int start = targetsTableModel.getRowCount();
            if ( start > 0 ) {
                for ( int i = start-1; i >= 0; i-- ) {
                    String curId = (String) targetsTableModel.getValueAt(i,0);
                    if ( curId != null ) {
                        if ( getTestSequence().getTestTargetById(curId) == null ) {
                            targetsTableModel.removeRow(i);
                        }
                    }
                }
            }
        }
        else {
            targetsTableModel.setRowCount(0);
        }
    }

    // Current target
    public void setCurrentTestTarget(TestTarget currentTestTarget) {
        this.currentTestTarget = currentTestTarget;
        eventEmitter.firePropertyChange("AutomatedTesterModel.currentTestTarget", null, currentTestTarget);
    }

    public void setCurrentTestTargetName(String name) {
        if ( currentTestTarget != null ) {
            currentTestTarget.setTargetName(name);
            syncTargetsTable();
            eventEmitter.firePropertyChange("AutomatedTesterModel.currentTestTarget.name", null, name);
        }
    }

    public void setCurrentTestTargetSelectionRange(int p1, int p2) {
        if ( currentTestTarget != null ) {
            currentTestTarget.setStartPos(p1);
            currentTestTarget.setEndPos(p2);
            syncTargetsTable();
            eventEmitter.firePropertyChange("AutomatedTesterModel.currentTestTarget.selectionRange", null, null);
        }
    }


    public void setCurrentTestTargetEncodings(ArrayList<PayloadEncoding> encodings) {
        if ( currentTestTarget != null ) {
            currentTestTarget.setEncodings(encodings);
            eventEmitter.firePropertyChange("AutomatedTesterModel.currentTestTarget.encodings", null, encodings);
        }
    }

    public DefaultTableModel getTestLogTableModel() {
        return testLogTableModel;
    }

    public void addWebsocketTraffic (String testName, WebsocketFrame frame, Color highlightColour) {

        String payloadStr = "";
        if ( frame.getPayloadUnmasked() != null ) {
            if (!frame.getOpcode().equals(WebsocketFrameType.CLOSE)) {
                payloadStr = GuiUtils.getTableBinPreviewStr(frame);
            }
            else {
                if ( frame.getPayloadUnmasked().length == 2 ) {
                    int closeCode = ByteBuffer.wrap(frame.getPayloadUnmasked()).getShort();
                    payloadStr = String.format("Code: %d", closeCode);
                }
            }
        }
        testTrafficTableModel.addRow(new Object[] {
                frame.getMessageUUID(),
                highlightColour,
                GuiUtils.trafficTimeFmt.format(new Date(frame.getCreateTime())),
                testName,
                frame.getDirection() == WebsocketDirection.INBOUND ? "←" : "→",
                frame.getOpcode(),
                frame.getPayloadLength(),
                payloadStr
        });
    }

    public void addTestLogMessage( String level, String testName, String message) {
        testLogTableModel.addRow(new Object[] {
                GuiUtils.trafficTimeFmt.format(System.currentTimeMillis()),
                level,
                testName,
                message
        });
    }
    public void addListener(PropertyChangeListener listener ) {
        eventEmitter.addPropertyChangeListener(listener);
    }
}
